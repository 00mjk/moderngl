#include "OpenGL.hpp"

namespace OpenGL {

	const void * GetOpenGLFunction(const char * name);

	bool LoadCoreOpenGLFunctions() {

%(function_load)s

		return true;
	}

%(function_check)s

%(function_declare)s

}

#if defined(_WIN32) || defined(_WIN64)

#include <Windows.h>

namespace OpenGL {
	HMODULE opengl32;

	typedef const void * (__stdcall * PROC_wglGetProcAddress)(const char *);
	typedef const void * (__stdcall * PROC_wglGetCurrentContext)();

	PROC_wglGetProcAddress wglGetProcAddress;
	PROC_wglGetCurrentContext wglGetCurrentContext;

	const void * GetOpenGLFunction(const char * name) {
		const void * result = (const void *)GetProcAddress(opengl32, name);

		if (!result) {
			result = OpenGL::wglGetProcAddress(name);
		}

		return result;
	}

	bool InitializeOpenGL() {
		opengl32 = LoadLibrary("opengl32.dll");

		if (!opengl32) {
			return false;
		}

		OpenGL::wglGetProcAddress = (PROC_wglGetProcAddress)GetProcAddress(opengl32, "wglGetProcAddress");
		
		if (!OpenGL::wglGetProcAddress) {
			return false;
		}
		OpenGL::wglGetCurrentContext = (PROC_wglGetCurrentContext)GetProcAddress(opengl32, "wglGetCurrentContext");
		
		if (!OpenGL::wglGetCurrentContext) {
			return false;
		}

		if (!OpenGL::wglGetCurrentContext()) {
			return false;
		}

		if (!LoadCoreOpenGLFunctions()) {
			return false;
		}

		return true;
	}

}

#else

#include <dlfcn.h>

namespace OpenGL {
	void * libgl;

	typedef const void * (* PROC_glXGetProcAddress)(const char *);
	typedef const void * (* PROC_glXGetCurrentContext)();

	PROC_glXGetProcAddress glXGetProcAddress;
	PROC_glXGetCurrentContext glXGetCurrentContext;

	const void * GetOpenGLFunction(const char * name) {
		const void * result = dlsym(libgl, name);
		
		if (!result) {
			result = OpenGL::glXGetProcAddress(name);
		}

		return result;
	}

	bool InitializeOpenGL() {
		libgl = dlopen("libGL.so.1", RTLD_LAZY);

		if (!libgl) {
			return false;
		}

		OpenGL::glXGetProcAddress = (PROC_glXGetProcAddress)dlsym(libgl, "glXGetProcAddress");

		if (!OpenGL::glXGetProcAddress) {
			return false;
		}

		OpenGL::glXGetCurrentContext = (PROC_glXGetCurrentContext)dlsym(libgl, "glXGetCurrentContext");

		if (!OpenGL::glXGetCurrentContext) {
			return false;
		}

		if (!OpenGL::glXGetCurrentContext()) {
			return false;
		}

		if (!LoadCoreOpenGLFunctions()) {
			return false;
		}

		return true;
	}
}


#endif

{
	"ModernGL Context": {
		"prefix": "mgl_context",
		"body": [
			"${1:ctx} = ModernGL.create_context()"
		]
	},
	"ModernGL Standalone Context": {
		"prefix": "mgl_standalone_context",
		"body": [
			"${1:ctx} = ModernGL.create_standalone_context()"
		]
	},
	"ModernGL Program": {
		"prefix": "mgl_program",
		"body": [
			"${1:prog} = ${2:ctx}.program([",
			"\t${2:ctx}.vertex_shader('''",
			"\t\t#version 330",
			"",
			"\t\tin vec2 vert;",
			"",
			"\t\tvoid main() {",
			"\t\t\tgl_Position = vec4(vert, 0.0, 1.0);",
			"\t\t}",
			"\t'''),",
			"\t${2:ctx}.fragment_shader('''",
			"\t\t#version 330",
			"",
			"\t\tout vec4 color;",
			"",
			"\t\tvoid main() {",
			"\t\t\tcolor = vec4(0.3, 0.5, 1.0, 1.0);",
			"\t}",
			"\t'''),",
			"])"
		]
	},
	"ModernGL Program From File": {
		"prefix": "mgl_program_from_file",
		"body": [
			"${1:prog} = ${2:ctx}.program([",
			"\t${2:ctx}.vertex_shader(${3:open('${4:vertex_shader.vert}').read()}),",
			"\t${2:ctx}.fragment_shader(${5:open('${6:fragment_shader.frag}').read()}),",
			"])"
		]
	},
	"ModernGL Buffer": {
		"prefix": "mgl_buffer",
		"body": [
			"${1:vbo} = ${2:ctx}.buffer(${3:struct.pack('${4:3f}', ${5:0.0, 0.0, 0.0})})"
		]
	},
	"ModernGL Reserve Buffer": {
		"prefix": "mgl_reserve_buffer",
		"body": [
			"${1:vbo} = ${2:ctx}.buffer(reserve=${3:1024})"
		]
	},
	"ModernGL Numpy Array Buffer": {
		"prefix": "mgl_numpy_array_buffer",
		"body": [
			"${1:vbo} = ${2:ctx}.buffer(${2:np.array(${3:[0.0, 0.0, 0.0]}, dtype=float32).tobytes()})"
		]
	},
	"ModernGL Simple VertexArray": {
		"prefix": "mgl_simple_vertex_array_object",
		"body": [
			"${1:vao} = ${2:ctx}.simple_vertex_array(${3:prog}, ${4:vbo}, ['${5:vert}'])"
		]
	},
	"ModernGL VertexArray": {
		"prefix": "mgl_vertex_array_object",
		"body": [
			"${1:vao} = ${2:ctx}.vertex_array(${3:prog}, [",
			"\t(${4:vbo}, ${5:vertex_format}, ['${6:vert}']),",
			"]"
		]
	},
	"ModernGL Render": {
		"prefix": "mgl_render",
		"body": [
			"${1:vao}.render(${2:ModernGL.${3:TRIANGLES}})"
		]
	},
	"ModernGL Render Vertices": {
		"prefix": "mgl_render_vertices",
		"body": [
			"${1:vao}.render(${2:ModernGL.${3:TRIANGLES}, ${4:number_of_vertices}})"
		]
	},
	"ModernGL Render Instanced": {
		"prefix": "mgl_render_instanced",
		"body": [
			"${1:vao}.render(${2:ModernGL.${3:TRIANGLES}, ${4:number_of_vertices}, instances=${5:1}})"
		]
	},
	"ModernGL Transform": {
		"prefix": "mgl_transform",
		"body": [
			"${1:vao}.transform(${2:${3:vbo}, vertices=${4:number_of_vertices}})"
		]
	},
	"ModernGL Uniform": {
		"prefix": "mgl_uniform",
		"body": [
			"${1:prog}.uniforms['${2:uniform}'].value = ${3:value}"
		]
	},
	"ModernGL UniformBlock": {
		"prefix": "mgl_uniform_block",
		"body": [
			"${1:prog}.uniform_blocks['${2:Block}'].binding = ${3:0}"
		]
	},
	"ModernGL Enable": {
		"prefix": "mgl_enable",
		"body": [
			"${1:ctx}.enable(${2:ModernGL.DEPTH_TEST})"
		]
	},
	"ModernGL Disable": {
		"prefix": "mgl_disable",
		"body": [
			"${1:ctx}.disable(${2:ModernGL.DEPTH_TEST})"
		]
	},
	"ModernGL Clear": {
		"prefix": "mgl_clear",
		"body": [
			"${1:ctx}.clear(${2:0.9}, ${3:0.9}, ${4:0.9})"
		]
	},
	"ModernGL Clear Viewport": {
		"prefix": "mgl_clear_viewport",
		"body": [
			"${1:ctx}.clear(${2:0.9}, ${3:0.9}, ${4:0.9}, viewport=${5:(${6:0}, ${7:0}, ${8:width}, ${9:height})})"
		]
	},
	"ModernGL Clear Framebuffer": {
		"prefix": "mgl_clear_framebuffer",
		"body": [
			"${1:fbo}.clear(${2:0.9}, ${3:0.9}, ${4:0.9})"
		]
	},
	"ModernGL Viewport": {
		"prefix": "mgl_viewport",
		"body": [
			"${1:ctx}.viewport = ${2:(${3:0}, ${4:0}, ${5:width}, ${6:height})}"
		]
	},
	"ModernGL Point Size and Line Width": {
		"prefix": "mgl_point_and_line",
		"body": [
			"${1:ctx}.point_size = ${2:7.0}",
			"${1:ctx}.line_width = ${3:3.0}"
		]
	},
	"ModernGL Use Default Framebuffer": {
		"prefix": "mgl_use_default_framebuffer_object",
		"body": [
			"${1:ctx}.default_framebuffer.use()"
		]
	},
	"ModernGL Framebuffer": {
		"prefix": "mgl_framebuffer",
		"body": [
			"${1:fbo} = ${2:ctx}.framebuffer([",
			"\t${3:${2:ctx}.renderbuffer(${4:size})},",
			"])"
		]
	},
	"ModernGL Framebuffer with Texture": {
		"prefix": "mgl_framebuffer_with_texture",
		"body": [
			"${1:fbo} = ${2:ctx}.framebuffer([",
			"\t${3:${2:ctx}.texture(${4:size}, ${4:components})},",
			"])"
		]
	},
	"ModernGL Framebuffer with Colors and Depth": {
		"prefix": "mgl_framebuffer",
		"body": [
			"${1:fbo}_colors = [",
			"\t${2:ctx}.renderbuffer(${3:size}),",
			"\t${2:ctx}.texture(${3:size}, ${4:components}),",
			"]",
			"",
			"${1:fbo}_depth = ${2:ctx}.renderbuffer(${3:size})",
			"${1:fbo} = ${2:ctx}.framebuffer(${1:fbo}_colors, ${1:fbo}_depth)"
		]
	},
	"ModernGL Texture RGB": {
		"prefix": "mgl_texture_rgb",
		"body": [
			"${1:img} = Image.open('${2:texture.jpg}').transpose(Image.FLIP_TOP_BOTTOM).convert('RGB')",
			"${3:texture} = ${4:ctx}.texture(${1:img}.size, 3, ${1:img}.tobytes(), alignment=1)"
		]
	},
	"ModernGL Texture RGBA": {
		"prefix": "mgl_texture_rgba",
		"body": [
			"${1:img} = Image.open('${2:texture.png}').transpose(Image.FLIP_TOP_BOTTOM).convert('RGBA')",
			"${3:texture} = ${4:ctx}.texture(${1:img}.size, 4, ${1:img}.tobytes(), alignment=1)"
		]
	},
	"ModernGL Test": {
		"prefix": "mgl_new_test",
		"body": [
			"import struct",
			"import unittest",
			"",
			"import ModernGL",
			"",
			"",
			"class TestCase(unittest.TestCase):",
			"",
			"\t@classmethod",
			"\tdef setUpClass(cls):",
			"\t\tcls.ctx = ModernGL.create_standalone_context()",
			"",
			"\tdef tearDown(self):",
        	"\t\tself.assertEqual(self.ctx.error, 'GL_NO_ERROR')",
			"",
			"\t@classmethod",
			"\tdef tearDownClass(cls):",
			"\t\tcls.ctx.release()",
			"",
			"\tdef test_1(self):",
			"\t\tctx = self.ctx",
			"\t\t$0",
			"",
			"",
			"if __name__ == '__main__':",
			"\tunittest.main()",
			""
		]
	},
    "ModernGL Example GLUT 2D": {
        "prefix": "mgl_new_example_glut_2d",
        "body": [
            "import struct",
            "import sys",
            "",
            "from OpenGL.GLUT import (",
            "\tGLUT_DEPTH, GLUT_DOUBLE, GLUT_RGB,",
            "\tglutCreateWindow, glutDisplayFunc, glutInit, glutInitDisplayMode,",
            "\tglutIdleFunc, glutInitWindowSize, glutMainLoop, glutSwapBuffers,",
            ")",
            "",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "width, height = 1280, 720",
            "",
            "glutInit(sys.argv)",
            "glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)",
            "glutInitWindowSize(width, height)",
            "glutCreateWindow(b'')",
            "",
            "ctx = ModernGL.create_context()",
            "",
            "prog = ctx.program([",
            "\tctx.vertex_shader('''",
            "\t\t#version 330",
            "",
            "\t\tuniform vec2 WindowSize;",
            "",
            "\t\tin vec2 in_vert;",
            "\t\tin vec3 in_color;",
            "",
            "\t\tout vec3 v_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tv_color = in_color;",
            "\t\t\tgl_Position = vec4(in_vert / WindowSize * 2.0, 0.0, 1.0);",
            "\t\t}",
            "\t'''),",
            "\tctx.fragment_shader('''",
            "\t\t#version 330",
            "",
            "\t\tin vec3 v_color;",
            "\t\tout vec4 f_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t}",
            "\t'''),",
            "])",
            "",
            "window_size = prog.uniforms['WindowSize']",
            "",
            "vbo = ctx.buffer(struct.pack(",
            "\t'15f',",
            "\t0.0, 100.0, 1.0, 0.0, 0.0,",
            "\t-86.0, -50.0, 0.0, 1.0, 0.0,",
            "\t86.0, -50.0, 0.0, 0.0, 1.0,",
            "))",
            "",
            "vao = ctx.simple_vertex_array(prog, vbo, ['in_vert', 'in_color'])",
            "",
            "",
            "def display():",
            "\tctx.viewport = (0, 0, width, height)",
            "\tctx.clear(0.9, 0.9, 0.9)",
            "\tctx.enable(ModernGL.BLEND)",
            "\twindow_size.value = (width, height)",
            "\tvao.render()",
            "",
            "\tglutSwapBuffers()",
            "",
            "",
            "glutDisplayFunc(display)",
            "glutIdleFunc(display)",
            "glutMainLoop()",
            ""
        ]
    },
	"ModernGL Example GLUT 3D": {
		"prefix": "mgl_new_example_glut_3d",
		"body": [
            "import struct",
            "import sys",
            "",
            "from OpenGL.GLUT import (",
            "\tGLUT_DEPTH, GLUT_DOUBLE, GLUT_RGB,",
            "\tglutCreateWindow, glutDisplayFunc, glutInit, glutInitDisplayMode,",
            "\tglutIdleFunc, glutInitWindowSize, glutMainLoop, glutSwapBuffers,",
            ")",
            "",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "width, height = 1280, 720",
            "",
            "glutInit(sys.argv)",
            "glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)",
            "glutInitWindowSize(width, height)",
            "glutCreateWindow(b'')",
            "",
            "ctx = ModernGL.create_context()",
            "",
            "prog = ctx.program([",
            "\tctx.vertex_shader('''",
            "\t\t#version 330",
            "",
            "\t\tuniform mat4 Mvp;",
            "",
            "\t\tin vec3 in_vert;",
            "\t\tin vec3 in_color;",
            "",
            "\t\tout vec3 v_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tv_color = in_color;",
            "\t\t\tgl_Position = Mvp * vec4(in_vert, 1.0);",
            "\t\t}",
            "\t'''),",
            "\tctx.fragment_shader('''",
            "\t\t#version 330",
            "",
            "\t\tin vec3 v_color;",
            "\t\tout vec4 f_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t}",
            "\t'''),",
            "])",
            "",
            "mvp = prog.uniforms['Mvp']",
            "",
            "grid = bytearray()",
            "",
            "for i in range(0, 32 + 1):",
            "\tgrid += struct.pack('6f', i - 16.0, -16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', i - 16.0, 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', -16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', 16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "",
            "vbo = ctx.buffer(grid)",
            "vao = ctx.simple_vertex_array(prog, vbo, ['in_vert', 'in_color'])",
            "",
            "",
            "def display():",
            "\tctx.viewport = (0, 0, width, height)",
            "\tctx.clear(0.9, 0.9, 0.9)",
            "\tctx.enable(ModernGL.DEPTH_TEST)",
            "",
            "\tproj = Matrix44.perspective_projection(45.0, width / height, 0.1, 1000.0)",
            "\tlookat = Matrix44.look_at(",
            "\t\t(40.0, 30.0, 20.0),",
            "\t\t(0.0, 0.0, 0.0),",
            "\t\t(0.0, 0.0, 1.0),",
            "\t)",
            "",
            "\tmvp.write((proj * lookat).astype('float32').tobytes())",
            "\tvao.render(ModernGL.LINES)",
            "",
            "\tglutSwapBuffers()",
            "",
            "",
            "glutDisplayFunc(display)",
            "glutIdleFunc(display)",
            "glutMainLoop()",
			""
        ]
    },
    "ModernGL Example GLWindow 2D": {
        "prefix": "mgl_new_example_glwindow_2d",
        "body": [
            "import struct",
            "",
            "import GLWindow",
            "import ModernGL",
            "",
            "wnd = GLWindow.create_window()",
            "ctx = ModernGL.create_context()",
            "",
            "prog = ctx.program([",
            "\tctx.vertex_shader('''",
            "\t\t#version 330",
            "",
            "\t\tuniform vec2 WindowSize;",
            "",
            "\t\tin vec2 in_vert;",
            "\t\tin vec3 in_color;",
            "",
            "\t\tout vec3 v_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tv_color = in_color;",
            "\t\t\tgl_Position = vec4(in_vert / WindowSize * 2.0, 0.0, 1.0);",
            "\t\t}",
            "\t'''),",
            "\tctx.fragment_shader('''",
            "\t\t#version 330",
            "",
            "\t\tin vec3 v_color;",
            "\t\tout vec4 f_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t}",
            "\t'''),",
            "])",
            "",
            "window_size = prog.uniforms['WindowSize']",
            "",
            "vbo = ctx.buffer(struct.pack(",
            "\t'15f',",
            "\t0.0, 100.0, 1.0, 0.0, 0.0,",
            "\t-86.0, -50.0, 0.0, 1.0, 0.0,",
            "\t86.0, -50.0, 0.0, 0.0, 1.0,",
            "))",
            "",
            "vao = ctx.simple_vertex_array(prog, vbo, ['in_vert', 'in_color'])",
            "",
            "while wnd.update():",
            "\tctx.viewport = wnd.viewport",
            "\tctx.clear(0.9, 0.9, 0.9)",
            "\tctx.enable(ModernGL.BLEND)",
            "\twindow_size.value = wnd.size",
            "\tvao.render()",
            ""
        ]
    },
	"ModernGL Example GLWindow 3D": {
		"prefix": "mgl_new_example_glwindow_3d",
		"body": [
            "import struct",
            "",
            "import GLWindow",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "wnd = GLWindow.create_window()",
            "ctx = ModernGL.create_context()",
            "",
            "prog = ctx.program([",
            "\tctx.vertex_shader('''",
            "\t\t#version 330",
            "",
            "\t\tuniform mat4 Mvp;",
            "",
            "\t\tin vec3 in_vert;",
            "\t\tin vec3 in_color;",
            "",
            "\t\tout vec3 v_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tv_color = in_color;",
            "\t\t\tgl_Position = Mvp * vec4(in_vert, 1.0);",
            "\t\t}",
            "\t'''),",
            "\tctx.fragment_shader('''",
            "\t\t#version 330",
            "",
            "\t\tin vec3 v_color;",
            "\t\tout vec4 f_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t}",
            "\t'''),",
            "])",
            "",
            "mvp = prog.uniforms['Mvp']",
            "",
            "grid = bytearray()",
            "",
            "for i in range(0, 32 + 1):",
            "\tgrid += struct.pack('6f', i - 16.0, -16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', i - 16.0, 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', -16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', 16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "",
            "vbo = ctx.buffer(grid)",
            "vao = ctx.simple_vertex_array(prog, vbo, ['in_vert', 'in_color'])",
            "",
            "while wnd.update():",
            "\tctx.viewport = wnd.viewport",
            "\tctx.clear(0.9, 0.9, 0.9)",
            "\tctx.enable(ModernGL.DEPTH_TEST)",
            "",
            "\tproj = Matrix44.perspective_projection(45.0, wnd.ratio, 0.1, 1000.0)",
            "\tlookat = Matrix44.look_at(",
            "\t\t(40.0, 30.0, 20.0),",
            "\t\t(0.0, 0.0, 0.0),",
            "\t\t(0.0, 0.0, 1.0),",
            "\t)",
            "",
            "\tmvp.write((proj * lookat).astype('float32').tobytes())",
            "\tvao.render(ModernGL.LINES)",
			""
        ]
    },
    "ModernGL Example Kivy 2D": {
        "prefix": "mgl_new_example_kivy_2d",
        "body": [
            "import struct",
            "",
            "from kivy.app import App",
            "from kivy.graphics import Callback",
            "from kivy.uix.widget import Widget",
            "from kivy.core.window import Window",
            "",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "",
            "class CustomWidget(Widget):",
            "\tdef __init__(self, **kwargs):",
            "\t\tsuper(CustomWidget, self).__init__(**kwargs)",
            "",
            "\t\twith self.canvas:",
            "\t\t\tself.ctx = ModernGL.create_context()",
            "",
            "\t\t\tself.prog = self.ctx.program([",
            "\t\t\t\tself.ctx.vertex_shader('''",
            "\t\t\t\t\t#version 330",
            "",
            "\t\t\t\t\tuniform vec2 WindowSize;",
            "",
            "\t\t\t\t\tin vec2 in_vert;",
            "\t\t\t\t\tin vec3 in_color;",
            "",
            "\t\t\t\t\tout vec3 v_color;",
            "",
            "\t\t\t\t\tvoid main() {",
            "\t\t\t\t\t\tv_color = in_color;",
            "\t\t\t\t\t\tgl_Position = vec4(in_vert / WindowSize * 2.0, 0.0, 1.0);",
            "\t\t\t\t\t}",
            "\t\t\t\t'''),",
            "\t\t\t\tself.ctx.fragment_shader('''",
            "\t\t\t\t\t#version 330",
            "",
            "\t\t\t\t\tin vec3 v_color;",
            "\t\t\t\t\tout vec4 f_color;",
            "",
            "\t\t\t\t\tvoid main() {",
            "\t\t\t\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t\t\t\t}",
            "\t\t\t\t'''),",
            "\t\t\t])",
            "",
            "\t\t\tself.window_size = self.prog.uniforms['WindowSize']",
            "",
            "\t\t\tself.vbo = self.ctx.buffer(struct.pack(",
            "\t\t\t\t'15f',",
            "\t\t\t\t0.0, 100.0, 1.0, 0.0, 0.0,",
            "\t\t\t\t-86.0, -50.0, 0.0, 1.0, 0.0,",
            "\t\t\t\t86.0, -50.0, 0.0, 0.0, 1.0,",
            "\t\t\t))",
            "",
            "\t\t\tself.vao = self.ctx.simple_vertex_array(self.prog, self.vbo, ['in_vert', 'in_color'])",
            "",
            "\t\t\tCallback(self.draw)",
            "",
            "\tdef draw(self, *args):",
            "\t\tself.width, self.height = Window.size",
            "\t\tself.ctx.viewport = (0, 0, self.width, self.height)",
            "\t\tself.ctx.clear(0.9, 0.9, 0.9)",
            "\t\tself.ctx.enable(ModernGL.BLEND)",
            "\t\tself.window_size.value = (self.width, self.height)",
            "\t\tself.vao.render()",
            "",
            "\tdef ask_update(self, *args):",
            "\t\tself.canvas.ask_update()",
            "",
            "",
            "class MainApp(App):",
            "\tdef build(self):",
            "\t\treturn CustomWidget()",
            "",
            "",
            "if __name__ == '__main__':",
            "\tMainApp().run()",
            ""
        ]
    },
	"ModernGL Example Kivy 3D": {
		"prefix": "mgl_new_example_kivy_3d",
		"body": [
            "import struct",
            "",
            "from kivy.app import App",
            "from kivy.graphics import Callback",
            "from kivy.uix.widget import Widget",
            "from kivy.core.window import Window",
            "",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "",
            "class CustomWidget(Widget):",
            "\tdef __init__(self, **kwargs):",
            "\t\tsuper(CustomWidget, self).__init__(**kwargs)",
            "",
            "\t\twith self.canvas:",
            "\t\t\tself.ctx = ModernGL.create_context()",
            "",
            "\t\t\tself.prog = self.ctx.program([",
            "\t\t\t\tself.ctx.vertex_shader('''",
            "\t\t\t\t\t#version 330",
            "",
            "\t\t\t\t\tuniform mat4 Mvp;",
            "",
            "\t\t\t\t\tin vec3 in_vert;",
            "\t\t\t\t\tin vec3 in_color;",
            "",
            "\t\t\t\t\tout vec3 v_color;",
            "",
            "\t\t\t\t\tvoid main() {",
            "\t\t\t\t\t\tv_color = in_color;",
            "\t\t\t\t\t\tgl_Position = Mvp * vec4(in_vert, 1.0);",
            "\t\t\t\t\t}",
            "\t\t\t\t'''),",
            "\t\t\t\tself.ctx.fragment_shader('''",
            "\t\t\t\t\t#version 330",
            "",
            "\t\t\t\t\tin vec3 v_color;",
            "\t\t\t\t\tout vec4 f_color;",
            "",
            "\t\t\t\t\tvoid main() {",
            "\t\t\t\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t\t\t\t}",
            "\t\t\t\t'''),",
            "\t\t\t])",
            "",
            "\t\t\tself.mvp = self.prog.uniforms['Mvp']",
            "",
            "\t\t\tgrid = bytearray()",
            "",
            "\t\t\tfor i in range(0, 32 + 1):",
            "\t\t\t\tgrid += struct.pack('6f', i - 16.0, -16.0, 0.0, 0.0, 0.0, 0.0)",
            "\t\t\t\tgrid += struct.pack('6f', i - 16.0, 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\t\t\t\tgrid += struct.pack('6f', -16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\t\t\t\tgrid += struct.pack('6f', 16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "",
            "\t\t\tself.vbo = self.ctx.buffer(grid)",
            "\t\t\tself.vao = self.ctx.simple_vertex_array(self.prog, self.vbo, ['in_vert', 'in_color'])",
            "",
            "\t\t\tCallback(self.draw)",
            "",
            "\tdef draw(self, *args):",
            "\t\twidth, height = Window.size",
            "\t\tself.ctx.viewport = (0, 0, width, height)",
            "\t\tself.ctx.clear(0.9, 0.9, 0.9)",
            "\t\tself.ctx.enable(ModernGL.DEPTH_TEST)",
            "",
            "\t\tproj = Matrix44.perspective_projection(45.0, width / height, 0.1, 1000.0)",
            "\t\tlookat = Matrix44.look_at(",
            "\t\t\t(40.0, 30.0, 20.0),",
            "\t\t\t(0.0, 0.0, 0.0),",
            "\t\t\t(0.0, 0.0, 1.0),",
            "\t\t)",
            "",
            "\t\tself.mvp.write((proj * lookat).astype('float32').tobytes())",
            "\t\tself.vao.render(ModernGL.LINES)",
            "",
            "\tdef ask_update(self, *args):",
            "\t\tself.canvas.ask_update()",
            "",
            "",
            "class MainApp(App):",
            "\tdef build(self):",
            "\t\treturn CustomWidget()",
            "",
            "",
            "if __name__ == '__main__':",
            "\tMainApp().run()",
			""
        ]
    },
    "ModernGL Example Pillow 2D": {
        "prefix": "mgl_new_example_pillow_2d",
        "body": [
            "import struct",
            "",
            "import ModernGL",
            "from PIL import Image",
            "from pyrr import Matrix44",
            "",
            "render_size = 1024, 1024",
            "image_size = 512, 512",
            "",
            "ctx = ModernGL.create_standalone_context()",
            "",
            "color_rbo = ctx.renderbuffer(render_size)",
            "depth_rbo = ctx.depth_renderbuffer(render_size)",
            "fbo = ctx.framebuffer(color_rbo, depth_rbo)",
            "",
            "fbo.use()",
            "",
            "prog = ctx.program([",
            "\tctx.vertex_shader('''",
            "\t\t#version 330",
            "",
            "\t\tuniform vec2 WindowSize;",
            "",
            "\t\tin vec2 in_vert;",
            "\t\tin vec3 in_color;",
            "",
            "\t\tout vec3 v_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tv_color = in_color;",
            "\t\t\tgl_Position = vec4(in_vert / WindowSize * 2.0, 0.0, 1.0);",
            "\t\t}",
            "\t'''),",
            "\tctx.fragment_shader('''",
            "\t\t#version 330",
            "",
            "\t\tin vec3 v_color;",
            "\t\tout vec4 f_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t}",
            "\t'''),",
            "])",
            "",
            "window_size = prog.uniforms['WindowSize']",
            "",
            "vbo = ctx.buffer(struct.pack(",
            "\t'15f',",
            "\t0.0, 100.0, 1.0, 0.0, 0.0,",
            "\t-86.0, -50.0, 0.0, 1.0, 0.0,",
            "\t86.0, -50.0, 0.0, 0.0, 1.0,",
            "))",
            "",
            "vao = ctx.simple_vertex_array(prog, vbo, ['in_vert', 'in_color'])",
            "",
            "width, height = render_size",
            "ctx.viewport = (0, 0, width, height)",
            "ctx.clear(0.9, 0.9, 0.9)",
            "ctx.enable(ModernGL.BLEND)",
            "window_size.value = (width, height)",
            "vao.render()",
            "",
            "img = Image.frombytes('RGB', render_size, fbo.read())",
            "img = img.transpose(Image.FLIP_TOP_BOTTOM)",
            "img = img.resize(image_size, Image.LANCZOS)",
            "img.save('window_coordinates.png')",
            ""
        ]
    },
	"ModernGL Example Pillow 3D": {
		"prefix": "mgl_new_example_pillow_3d",
		"body": [
            "import struct",
            "",
            "import ModernGL",
            "from PIL import Image",
            "from pyrr import Matrix44",
            "",
            "render_size = 1024, 1024",
            "image_size = 512, 512",
            "",
            "ctx = ModernGL.create_standalone_context()",
            "",
            "color_rbo = ctx.renderbuffer(render_size)",
            "depth_rbo = ctx.depth_renderbuffer(render_size)",
            "fbo = ctx.framebuffer(color_rbo, depth_rbo)",
            "",
            "fbo.use()",
            "",
            "prog = ctx.program([",
            "\tctx.vertex_shader('''",
            "\t\t#version 330",
            "",
            "\t\tuniform mat4 Mvp;",
            "",
            "\t\tin vec3 in_vert;",
            "\t\tin vec3 in_color;",
            "",
            "\t\tout vec3 v_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tv_color = in_color;",
            "\t\t\tgl_Position = Mvp * vec4(in_vert, 1.0);",
            "\t\t}",
            "\t'''),",
            "\tctx.fragment_shader('''",
            "\t\t#version 330",
            "",
            "\t\tin vec3 v_color;",
            "\t\tout vec4 f_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t}",
            "\t'''),",
            "])",
            "",
            "mvp = prog.uniforms['Mvp']",
            "",
            "grid = bytearray()",
            "",
            "for i in range(0, 32 + 1):",
            "\tgrid += struct.pack('6f', i - 16.0, -16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', i - 16.0, 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', -16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', 16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "",
            "vbo = ctx.buffer(grid)",
            "vao = ctx.simple_vertex_array(prog, vbo, ['in_vert', 'in_color'])",
            "",
            "width, height = render_size",
            "ctx.viewport = (0, 0, width, height)",
            "ctx.clear(0.9, 0.9, 0.9)",
            "ctx.enable(ModernGL.DEPTH_TEST)",
            "",
            "proj = Matrix44.perspective_projection(45.0, width / height, 0.1, 1000.0)",
            "lookat = Matrix44.look_at(",
            "\t(40.0, 30.0, 20.0),",
            "\t(0.0, 0.0, 0.0),",
            "\t(0.0, 0.0, 1.0),",
            ")",
            "",
            "mvp.write((proj * lookat).astype('float32').tobytes())",
            "vao.render(ModernGL.LINES)",
            "",
            "img = Image.frombytes('RGB', render_size, fbo.read())",
            "img = img.transpose(Image.FLIP_TOP_BOTTOM)",
            "img = img.resize(image_size, Image.LANCZOS)",
            "img.save('perspective_projection.png')",
			""
        ]
    },
    "ModernGL Example pygame 2D": {
        "prefix": "mgl_new_example_pygame_2d",
        "body": [
            "import struct",
            "",
            "import pygame",
            "from pygame.locals import DOUBLEBUF, OPENGL",
            "",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "width, height = 1280, 720",
            "",
            "pygame.init()",
            "pygame.display.set_mode((width, height), DOUBLEBUF | OPENGL)",
            "",
            "ctx = ModernGL.create_context()",
            "",
            "prog = ctx.program([",
            "\tctx.vertex_shader('''",
            "\t\t#version 330",
            "",
            "\t\tuniform vec2 WindowSize;",
            "",
            "\t\tin vec2 in_vert;",
            "\t\tin vec3 in_color;",
            "",
            "\t\tout vec3 v_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tv_color = in_color;",
            "\t\t\tgl_Position = vec4(in_vert / WindowSize * 2.0, 0.0, 1.0);",
            "\t\t}",
            "\t'''),",
            "\tctx.fragment_shader('''",
            "\t\t#version 330",
            "",
            "\t\tin vec3 v_color;",
            "\t\tout vec4 f_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t}",
            "\t'''),",
            "])",
            "",
            "window_size = prog.uniforms['WindowSize']",
            "",
            "vbo = ctx.buffer(struct.pack(",
            "\t'15f',",
            "\t0.0, 100.0, 1.0, 0.0, 0.0,",
            "\t-86.0, -50.0, 0.0, 1.0, 0.0,",
            "\t86.0, -50.0, 0.0, 0.0, 1.0,",
            "))",
            "",
            "vao = ctx.simple_vertex_array(prog, vbo, ['in_vert', 'in_color'])",
            "",
            "running = True",
            "while running:",
            "\tfor event in pygame.event.get():",
            "\t\tif event.type == pygame.QUIT:",
            "\t\t\trunning = False",
            "",
            "\tctx.viewport = (0, 0, width, height)",
            "\tctx.clear(0.9, 0.9, 0.9)",
            "\tctx.enable(ModernGL.BLEND)",
            "\twindow_size.value = (width, height)",
            "\tvao.render()",
            "",
            "\tpygame.display.flip()",
            "\tpygame.time.wait(10)",
            ""
        ]
    },
	"ModernGL Example pygame 3D": {
		"prefix": "mgl_new_example_pygame_3d",
		"body": [
            "import struct",
            "",
            "import pygame",
            "from pygame.locals import DOUBLEBUF, OPENGL",
            "",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "width, height = 1280, 720",
            "",
            "pygame.init()",
            "pygame.display.set_mode((width, height), DOUBLEBUF | OPENGL)",
            "",
            "ctx = ModernGL.create_context()",
            "",
            "prog = ctx.program([",
            "\tctx.vertex_shader('''",
            "\t\t#version 330",
            "",
            "\t\tuniform mat4 Mvp;",
            "",
            "\t\tin vec3 in_vert;",
            "\t\tin vec3 in_color;",
            "",
            "\t\tout vec3 v_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tv_color = in_color;",
            "\t\t\tgl_Position = Mvp * vec4(in_vert, 1.0);",
            "\t\t}",
            "\t'''),",
            "\tctx.fragment_shader('''",
            "\t\t#version 330",
            "",
            "\t\tin vec3 v_color;",
            "\t\tout vec4 f_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t}",
            "\t'''),",
            "])",
            "",
            "mvp = prog.uniforms['Mvp']",
            "",
            "grid = bytearray()",
            "",
            "for i in range(0, 32 + 1):",
            "\tgrid += struct.pack('6f', i - 16.0, -16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', i - 16.0, 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', -16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', 16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "",
            "vbo = ctx.buffer(grid)",
            "vao = ctx.simple_vertex_array(prog, vbo, ['in_vert', 'in_color'])",
            "",
            "running = True",
            "while running:",
            "\tfor event in pygame.event.get():",
            "\t\tif event.type == pygame.QUIT:",
            "\t\t\trunning = False",
            "",
            "\tctx.viewport = (0, 0, width, height)",
            "\tctx.clear(0.9, 0.9, 0.9)",
            "\tctx.enable(ModernGL.DEPTH_TEST)",
            "",
            "\tproj = Matrix44.perspective_projection(45.0, width / height, 0.1, 1000.0)",
            "\tlookat = Matrix44.look_at(",
            "\t\t(40.0, 30.0, 20.0),",
            "\t\t(0.0, 0.0, 0.0),",
            "\t\t(0.0, 0.0, 1.0),",
            "\t)",
            "",
            "\tmvp.write((proj * lookat).astype('float32').tobytes())",
            "\tvao.render(ModernGL.LINES)",
            "",
            "\tpygame.display.flip()",
            "\tpygame.time.wait(10)",
			""
        ]
    },
    "ModernGL Example pyglet 2D": {
        "prefix": "mgl_new_example_pyglet_2d",
        "body": [
            "import struct",
            "",
            "import pyglet",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "wnd = pyglet.window.Window(1280, 720)",
            "ctx = ModernGL.create_context()",
            "",
            "prog = ctx.program([",
            "\tctx.vertex_shader('''",
            "\t\t#version 330",
            "",
            "\t\tuniform vec2 WindowSize;",
            "",
            "\t\tin vec2 in_vert;",
            "\t\tin vec3 in_color;",
            "",
            "\t\tout vec3 v_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tv_color = in_color;",
            "\t\t\tgl_Position = vec4(in_vert / WindowSize * 2.0, 0.0, 1.0);",
            "\t\t}",
            "\t'''),",
            "\tctx.fragment_shader('''",
            "\t\t#version 330",
            "",
            "\t\tin vec3 v_color;",
            "\t\tout vec4 f_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t}",
            "\t'''),",
            "])",
            "",
            "window_size = prog.uniforms['WindowSize']",
            "",
            "vbo = ctx.buffer(struct.pack(",
            "\t'15f',",
            "\t0.0, 100.0, 1.0, 0.0, 0.0,",
            "\t-86.0, -50.0, 0.0, 1.0, 0.0,",
            "\t86.0, -50.0, 0.0, 0.0, 1.0,",
            "))",
            "",
            "vao = ctx.simple_vertex_array(prog, vbo, ['in_vert', 'in_color'])",
            "",
            "",
            "def update(dt):",
            "\tctx.viewport = (0, 0, wnd.width, wnd.height)",
            "\tctx.clear(0.9, 0.9, 0.9)",
            "\tctx.enable(ModernGL.BLEND)",
            "\twindow_size.value = (wnd.width, wnd.height)",
            "\tvao.render()",
            "",
            "",
            "pyglet.clock.schedule_interval(update, 1.0 / 60.0)",
            "pyglet.app.run()",
            ""
        ]
    },
	"ModernGL Example pyglet 3D": {
		"prefix": "mgl_new_example_pyglet_3d",
		"body": [
            "import struct",
            "",
            "import pyglet",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "wnd = pyglet.window.Window(1280, 720)",
            "ctx = ModernGL.create_context()",
            "",
            "prog = ctx.program([",
            "\tctx.vertex_shader('''",
            "\t\t#version 330",
            "",
            "\t\tuniform mat4 Mvp;",
            "",
            "\t\tin vec3 in_vert;",
            "\t\tin vec3 in_color;",
            "",
            "\t\tout vec3 v_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tv_color = in_color;",
            "\t\t\tgl_Position = Mvp * vec4(in_vert, 1.0);",
            "\t\t}",
            "\t'''),",
            "\tctx.fragment_shader('''",
            "\t\t#version 330",
            "",
            "\t\tin vec3 v_color;",
            "\t\tout vec4 f_color;",
            "",
            "\t\tvoid main() {",
            "\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t}",
            "\t'''),",
            "])",
            "",
            "mvp = prog.uniforms['Mvp']",
            "",
            "grid = bytearray()",
            "",
            "for i in range(0, 32 + 1):",
            "\tgrid += struct.pack('6f', i - 16.0, -16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', i - 16.0, 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', -16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\tgrid += struct.pack('6f', 16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "",
            "vbo = ctx.buffer(grid)",
            "vao = ctx.simple_vertex_array(prog, vbo, ['in_vert', 'in_color'])",
            "",
            "",
            "def update(dt):",
            "\tctx.viewport = (0, 0, wnd.width, wnd.height)",
            "\tctx.clear(0.9, 0.9, 0.9)",
            "\tctx.enable(ModernGL.DEPTH_TEST)",
            "",
            "\tproj = Matrix44.perspective_projection(45.0, wnd.width / wnd.height, 0.1, 1000.0)",
            "\tlookat = Matrix44.look_at(",
            "\t\t(40.0, 30.0, 20.0),",
            "\t\t(0.0, 0.0, 0.0),",
            "\t\t(0.0, 0.0, 1.0),",
            "\t)",
            "",
            "\tmvp.write((proj * lookat).astype('float32').tobytes())",
            "\tvao.render(ModernGL.LINES)",
            "",
            "",
            "pyglet.clock.schedule_interval(update, 1.0 / 60.0)",
            "pyglet.app.run()",
			""
        ]
    },
    "ModernGL Example PyQt5 2D": {
        "prefix": "mgl_new_example_pyqt5_2d",
        "body": [
            "import struct",
            "",
            "from PyQt5 import QtOpenGL, QtWidgets",
            "",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "",
            "class QGLControllerWidget(QtOpenGL.QGLWidget):",
            "\tdef __init__(self):",
            "\t\tfmt = QtOpenGL.QGLFormat()",
            "\t\tfmt.setVersion(3, 3)",
            "\t\tfmt.setProfile(QtOpenGL.QGLFormat.CoreProfile)",
            "\t\tfmt.setSampleBuffers(True)",
            "\t\tsuper(QGLControllerWidget, self).__init__(fmt, None)",
            "",
            "\tdef initializeGL(self):",
            "\t\tself.ctx = ModernGL.create_context()",
            "",
            "\t\tself.prog = self.ctx.program([",
            "\t\t\tself.ctx.vertex_shader('''",
            "\t\t\t\t#version 330",
            "",
            "\t\t\t\tuniform vec2 WindowSize;",
            "",
            "\t\t\t\tin vec2 in_vert;",
            "\t\t\t\tin vec3 in_color;",
            "",
            "\t\t\t\tout vec3 v_color;",
            "",
            "\t\t\t\tvoid main() {",
            "\t\t\t\t\tv_color = in_color;",
            "\t\t\t\t\tgl_Position = vec4(in_vert / WindowSize * 2.0, 0.0, 1.0);",
            "\t\t\t\t}",
            "\t\t\t'''),",
            "\t\t\tself.ctx.fragment_shader('''",
            "\t\t\t\t#version 330",
            "",
            "\t\t\t\tin vec3 v_color;",
            "\t\t\t\tout vec4 f_color;",
            "",
            "\t\t\t\tvoid main() {",
            "\t\t\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t\t\t}",
            "\t\t\t'''),",
            "\t\t])",
            "",
            "\t\tself.window_size = self.prog.uniforms['WindowSize']",
            "",
            "\t\tself.vbo = self.ctx.buffer(struct.pack(",
            "\t\t\t'15f',",
            "\t\t\t0.0, 100.0, 1.0, 0.0, 0.0,",
            "\t\t\t-86.0, -50.0, 0.0, 1.0, 0.0,",
            "\t\t\t86.0, -50.0, 0.0, 0.0, 1.0,",
            "\t\t))",
            "",
            "\t\tself.vao = self.ctx.simple_vertex_array(self.prog, self.vbo, ['in_vert', 'in_color'])",
            "",
            "\tdef paintGL(self):",
            "\t\twidth, height = self.width(), self.height()",
            "\t\tself.ctx.viewport = (0, 0, width, height)",
            "\t\tself.ctx.clear(0.9, 0.9, 0.9)",
            "\t\tself.ctx.enable(ModernGL.BLEND)",
            "\t\tself.window_size.value = (width, height)",
            "\t\tself.vao.render()",
            "",
            "",
            "app = QtWidgets.QApplication([])",
            "window = QGLControllerWidget()",
            "window.move(QtWidgets.QDesktopWidget().rect().center() - window.rect().center())",
            "window.show()",
            "app.exec_()",
            ""
        ]
    },
	"ModernGL Example PyQt5 3D": {
		"prefix": "mgl_new_example_pyqt5_3d",
		"body": [
            "import struct",
            "",
            "from PyQt5 import QtOpenGL, QtWidgets",
            "",
            "import ModernGL",
            "from pyrr import Matrix44",
            "",
            "",
            "class QGLControllerWidget(QtOpenGL.QGLWidget):",
            "\tdef __init__(self):",
            "\t\tfmt = QtOpenGL.QGLFormat()",
            "\t\tfmt.setVersion(3, 3)",
            "\t\tfmt.setProfile(QtOpenGL.QGLFormat.CoreProfile)",
            "\t\tfmt.setSampleBuffers(True)",
            "\t\tsuper(QGLControllerWidget, self).__init__(fmt, None)",
            "",
            "\tdef initializeGL(self):",
            "\t\tself.ctx = ModernGL.create_context()",
            "",
            "\t\tself.prog = self.ctx.program([",
            "\t\t\tself.ctx.vertex_shader('''",
            "\t\t\t\t#version 330",
            "",
            "\t\t\t\tuniform mat4 Mvp;",
            "",
            "\t\t\t\tin vec3 in_vert;",
            "\t\t\t\tin vec3 in_color;",
            "",
            "\t\t\t\tout vec3 v_color;",
            "",
            "\t\t\t\tvoid main() {",
            "\t\t\t\t\tv_color = in_color;",
            "\t\t\t\t\tgl_Position = Mvp * vec4(in_vert, 1.0);",
            "\t\t\t\t}",
            "\t\t\t'''),",
            "\t\t\tself.ctx.fragment_shader('''",
            "\t\t\t\t#version 330",
            "",
            "\t\t\t\tin vec3 v_color;",
            "\t\t\t\tout vec4 f_color;",
            "",
            "\t\t\t\tvoid main() {",
            "\t\t\t\t\tf_color = vec4(v_color, 1.0);",
            "\t\t\t\t}",
            "\t\t\t'''),",
            "\t\t])",
            "",
            "\t\tself.mvp = self.prog.uniforms['Mvp']",
            "",
            "\t\tgrid = bytearray()",
            "",
            "\t\tfor i in range(0, 32 + 1):",
            "\t\t\tgrid += struct.pack('6f', i - 16.0, -16.0, 0.0, 0.0, 0.0, 0.0)",
            "\t\t\tgrid += struct.pack('6f', i - 16.0, 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\t\t\tgrid += struct.pack('6f', -16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "\t\t\tgrid += struct.pack('6f', 16.0, i - 16.0, 0.0, 0.0, 0.0, 0.0)",
            "",
            "\t\tself.vbo = self.ctx.buffer(grid)",
            "\t\tself.vao = self.ctx.simple_vertex_array(self.prog, self.vbo, ['in_vert', 'in_color'])",
            "",
            "\tdef paintGL(self):",
            "\t\twidth, height = self.width(), self.height()",
            "\t\tself.ctx.viewport = (0, 0, width, height)",
            "\t\tself.ctx.clear(0.9, 0.9, 0.9)",
            "\t\tself.ctx.enable(ModernGL.DEPTH_TEST)",
            "",
            "\t\tproj = Matrix44.perspective_projection(45.0, width / height, 0.1, 1000.0)",
            "\t\tlookat = Matrix44.look_at(",
            "\t\t\t(40.0, 30.0, 20.0),",
            "\t\t\t(0.0, 0.0, 0.0),",
            "\t\t\t(0.0, 0.0, 1.0),",
            "\t\t)",
            "",
            "\t\tself.mvp.write((proj * lookat).astype('float32').tobytes())",
            "\t\tself.vao.render(ModernGL.LINES)",
            "",
            "",
            "app = QtWidgets.QApplication([])",
            "window = QGLControllerWidget()",
            "window.move(QtWidgets.QDesktopWidget().rect().center() - window.rect().center())",
            "window.show()",
            "app.exec_()",
			""
        ]
    }
}
